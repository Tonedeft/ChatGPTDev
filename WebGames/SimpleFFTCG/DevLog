4/29/23

Starting with a basic html file with js scripting to display cards on the table and manipulate them in some way.

Today, trying to set up a microservices architecture where I can have users log index

Installing node.js
https://nodejs.org/en

Setting up express framework to access my html files

Copied source code for the book from: https://pragprog.com/titles/egmicro/practical-microservices/
I couldn't find full source code anywhere in the book.

To install dependencies from package.json
Ran 
> npm install

There were 9 vulnerabilities, 5 high
it recommended running npm audit fix --force

So I ran
> npm audit fix --force

"found 0 vulnerabilities"

Probably just the older versions from an older book


I need a PostgreSQL database running
Following book instructions to create docker-compose.yaml

To run database:
> docker-compose rm -sf
> docker-compose up

To initialize the npm server
> npm init
# creates package.json


To run server connecting to that database:
> npm run start-dev-server

4/30/23

Installing knex
> npm install knex -g

Inside SimpleFFTCG
> knex init
# creates knexfile.js
## This may not be necessary

Going ahead and manually creating the first migration file
using today's date

## Had to update some versions because knex was timing out accessing
## the database
https://stackoverflow.com/questions/40435315/knex-timeout-acquiring-a-connection-the-pool-is-probably-full-are-you-missing

Access using localhost:3000


=========================================================

Notes on Microservices Architecture

5 categories
1. Applications - HTTP endpoints that end users interact with.  Request/response.
2. Components - Doers of things. Encapsulates a distinct business process. Batch mode.
3. Aggregators - aggregate state transitions into View Data that applications use to render what end users see. Batch mode.
4. View Data - read-only models derived from state transitions. Eventually consistent derivations from authoritative state. We don't make decisions based on View Data. PostgreSQL tables, or other databases.
5. Message Store - At the center. State transitions live here. Also a transport mechanism. 'message-db' in this project.

===================================================

Start of chapter 2

Changing the architecture to messaging one.

We'll create a _VideoViewed_ event
that will write to a _viewing-<id>_ stream

This could be refactored into a Component later,
but for now the Application itself will record the Event

Adding message-db container for handling messages
(commands and events) recorded by Applications and
Containers

===================================================

Chapter 3

TODO: Not a big fan of using "ethangarofalo/message-db".  I may want to just clone the github repo and build it myself as part of deployment.

Running it now, it will record a "VideoViewed" event to the messages table in the message_store database
In the message-db container.



===================================================

Chapter 4

Wrote 2 Applications: home and record-viewings
Wrote Message Store
Now write Aggregator

New migration to build "pages" table.

GAME_NOTE: I could probably write a page right now for
           game_table that is pretty much the same thing.

The Aggregator works, but we haven't updated the Message Store to handle subscriptions yet, so "createSubscription()" fails

===================================================

Chapter 5

Subscriber:
inside aggregators
home-page.js
 - build() function creates the aggregator
 - build() creates subscription to "viewing" category stream
 - createHandlers() provides handler for VideoViewed Events
 - createQueries() gives queries to modify state databases (like "pages")

A whole bunch of stuff happens inside the message-store files
to set up subscriptions and call the appropriate handlers.


=============================================

Part II

Chapter 6 - Registering Users

NOTE: This book's examples suck.  I'm positive I did not
      make _that_ many typos when I was copying from it.


=============================================

Component: identity - owns registration messages
Application: register-users - allows users to submit registration requests

Need to discover the "domain messages" that model the
new functionality

Will create:
* Registered Event
* Register Command
* RegistrationRejected Event

* "identity" Entity

* CloseAccount Command
* AccountClosed Event

It is useful to write a contract.md that defines
the messages that this component will handle

------------------------------------------------

Create register-users application
- takes user input and writes Register command to Message Store

In general, Component owns all business logic
for checking its own inputs

Now we need to create a "user_credentials" table
in the knex database.

